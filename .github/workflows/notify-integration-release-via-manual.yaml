# Manual release workflow is used for deploying documentation updates
# on the specified branch without making an official plugin release.
name: Notify Integration Release (Manual)
on:
  workflow_dispatch:
    inputs:
      version:
        description: "The release version (semver)"
        default: 1.0.0
        required: false
      branch:
        description: "A branch or SHA"
        default: "main"
        required: false
jobs:
  notify-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ github.event.inputs.branch }}
      # Ensure that Docs are Compiled
      - name: Import environment variables from file
        run: cat ".github/env" >> $GITHUB_ENV
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version: ">=${{ env.golang-version }}"
          cache: false
      - shell: bash
        run: make generate
      - shell: bash
        run: |
          if [[ -z "$(git status -s)" ]]; then
            echo "OK"
          else
            echo "Docs have been updated, but the compiled docs have not been committed."
            echo "Run 'make generate', and commit the result to resolve this error."
            exit 1
          fi
      # Perform the Release
      - name: Checkout integration-release-action
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: hashicorp/integration-release-action
          path: ./integration-release-action
      - name: Notify Release
        uses: ./integration-release-action
        with:
          # The integration identifier will be used by the Packer team to register the integration
          # the expected format is packer/<GitHub Org Name>/<plugin-name>
          integration_identifier: "packer/mondoohq/cnspec"
          release_version: ${{ github.event.inputs.version }}
          release_sha: ${{ github.event.inputs.branch }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
